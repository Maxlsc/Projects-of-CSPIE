#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include "arm_neon.h"

const uint8_t sbox_enc[256] = {
	0x63, 0xca, 0xb7, 0x04, 0x7c, 0x82, 0xfd, 0xc7,
	0x77, 0xc9, 0x93, 0x23, 0x7b, 0x7d, 0x26, 0xc3,
	0xf2, 0xfa, 0x36, 0x18, 0x6b, 0x59, 0x3f, 0x96,
	0x6f, 0x47, 0xf7, 0x05, 0xc5, 0xf0, 0xcc, 0x9a,
	0x30, 0xad, 0x34, 0x07, 0x01, 0xd4, 0xa5, 0x12,
	0x67, 0xa2, 0xe5, 0x80, 0x2b, 0xaf, 0xf1, 0xe2,
	0xfe, 0x9c, 0x71, 0xeb, 0xd7, 0xa4, 0xd8, 0x27,
	0xab, 0x72, 0x31, 0xb2, 0x76, 0xc0, 0x15, 0x75,
	0x09, 0x53, 0xd0, 0x51, 0x83, 0xd1, 0xef, 0xa3,
	0x2c, 0x00, 0xaa, 0x40, 0x1a, 0xed, 0xfb, 0x8f,
	0x1b, 0x20, 0x43, 0x92, 0x6e, 0xfc, 0x4d, 0x9d,
	0x5a, 0xb1, 0x33, 0x38, 0xa0, 0x5b, 0x85, 0xf5,
	0x52, 0x6a, 0x45, 0xbc, 0x3b, 0xcb, 0xf9, 0xb6,
	0xd6, 0xbe, 0x02, 0xda, 0xb3, 0x39, 0x7f, 0x21,
	0x29, 0x4a, 0x50, 0x10, 0xe3, 0x4c, 0x3c, 0xff,
	0x2f, 0x58, 0x9f, 0xf3, 0x84, 0xcf, 0xa8, 0xd2,
	0xcd, 0x60, 0xe0, 0xe7, 0x0c, 0x81, 0x32, 0xc8,
	0x13, 0x4f, 0x3a, 0x37, 0xec, 0xdc, 0x0a, 0x6d,
	0x5f, 0x22, 0x49, 0x8d, 0x97, 0x2a, 0x06, 0xd5,
	0x44, 0x90, 0x24, 0x4e, 0x17, 0x88, 0x5c, 0xa9,
	0xc4, 0x46, 0xc2, 0x6c, 0xa7, 0xee, 0xd3, 0x56,
	0x7e, 0xb8, 0xac, 0xf4, 0x3d, 0x14, 0x62, 0xea,
	0x64, 0xde, 0x91, 0x65, 0x5d, 0x5e, 0x95, 0x7a,
	0x19, 0x0b, 0xe4, 0xae, 0x73, 0xdb, 0x79, 0x08,
	0xba, 0x70, 0xe1, 0x8c, 0x78, 0x3e, 0xf8, 0xa1,
	0x25, 0xb5, 0x98, 0x89, 0x2e, 0x66, 0x11, 0x0d,
	0x1c, 0x48, 0x69, 0xbf, 0xa6, 0x03, 0xd9, 0xe6,
	0xb4, 0xf6, 0x8e, 0x42, 0xc6, 0x0e, 0x94, 0x68,
	0xe8, 0x61, 0x9b, 0x41, 0xdd, 0x35, 0x1e, 0x99,
	0x74, 0x57, 0x87, 0x2d, 0x1f, 0xb9, 0xe9, 0x0f,
	0x4b, 0x86, 0xce, 0xb0, 0xbd, 0xc1, 0x55, 0x54,
	0x8b, 0x1d, 0x28, 0xbb, 0x8a, 0x9e, 0xdf, 0x16
};

const uint8_t sbox_dec[256] = {
	0x52, 0x7c, 0x54, 0x08, 0x09, 0xe3, 0x7b, 0x2e,
	0x6a, 0x39, 0x94, 0xa1, 0xd5, 0x82, 0x32, 0x66,
	0x30, 0x9b, 0xa6, 0x28, 0x36, 0x2f, 0xc2, 0xd9,
	0xa5, 0xff, 0x23, 0x24, 0x38, 0x87, 0x3d, 0xb2,
	0xbf, 0x34, 0xee, 0x76, 0x40, 0x8e, 0x4c, 0x5b,
	0xa3, 0x43, 0x95, 0xa2, 0x9e, 0x44, 0x0b, 0x49,
	0x81, 0xc4, 0x42, 0x6d, 0xf3, 0xde, 0xfa, 0x8b,
	0xd7, 0xe9, 0xc3, 0xd1, 0xfb, 0xcb, 0x4e, 0x25,
	0x72, 0x6c, 0x90, 0xd0, 0xf8, 0x70, 0xd8, 0x2c,
	0xf6, 0x48, 0xab, 0x1e, 0x64, 0x50, 0x00, 0x8f,
	0x86, 0xfd, 0x8c, 0xca, 0x68, 0xed, 0xbc, 0x3f,
	0x98, 0xb9, 0xd3, 0x0f, 0x16, 0xda, 0x0a, 0x02,
	0xd4, 0x5e, 0xf7, 0xc1, 0xa4, 0x15, 0xe4, 0xaf,
	0x5c, 0x46, 0x58, 0xbd, 0xcc, 0x57, 0x05, 0x03,
	0x5d, 0xa7, 0xb8, 0x01, 0x65, 0x8d, 0xb3, 0x13,
	0xb6, 0x9d, 0x45, 0x8a, 0x92, 0x84, 0x06, 0x6b,
	0x3a, 0x96, 0x47, 0xfc, 0x91, 0xac, 0xf1, 0x56,
	0x11, 0x74, 0x1a, 0x3e, 0x41, 0x22, 0x71, 0x4b,
	0x4f, 0xe7, 0x1d, 0xc6, 0x67, 0xad, 0x29, 0xd2,
	0xdc, 0x35, 0xc5, 0x79, 0xea, 0x85, 0x89, 0x20,
	0x97, 0xe2, 0x6f, 0x9a, 0xf2, 0xf9, 0xb7, 0xdb,
	0xcf, 0x37, 0x62, 0xc0, 0xce, 0xe8, 0x0e, 0xfe,
	0xf0, 0x1c, 0xaa, 0x78, 0xb4, 0x75, 0x18, 0xcd,
	0xe6, 0xdf, 0xbe, 0x5a, 0x73, 0x6e, 0x1b, 0xf4,
	0x1f, 0x60, 0xa0, 0x17, 0xdd, 0x51, 0xe0, 0x2b,
	0xa8, 0x7f, 0x3b, 0x04, 0x33, 0xa9, 0x4d, 0x7e,
	0x88, 0x19, 0xae, 0xba, 0x07, 0xb5, 0x2a, 0x77,
	0xc7, 0x4a, 0xf5, 0xd6, 0x31, 0x0d, 0xb0, 0x26,
	0xb1, 0x2d, 0xc8, 0xe1, 0x12, 0xe5, 0xeb, 0x69,
	0x10, 0x7a, 0xbb, 0x14, 0x59, 0x9f, 0x3c, 0x63,
	0x27, 0x93, 0x83, 0x55, 0x80, 0xc9, 0x53, 0x21,
	0xec, 0x9c, 0x99, 0x0c, 0x5f, 0xef, 0x61, 0x7d
};

uint8x16x4_t sboxv_enc[4];
uint8x16x4_t sboxv_dec[4];

static const uint8x16_t shift_rows = {
	0x0, 0x5, 0xa, 0xf, 0x4, 0x9, 0xe, 0x3,
	0x8, 0xd, 0x2, 0x7, 0xc, 0x1, 0x6, 0xb
};

static const uint8x16_t inv_shift_rows = {
	0x0, 0xd, 0xa, 0x7, 0x4, 0x1, 0xe, 0xb,
	0x8, 0x5, 0x2, 0xf, 0xc, 0x9, 0x6, 0x3
};

static const uint8x16_t ror32by8 = {
	0x1, 0x2, 0x3, 0x0, 0x5, 0x6, 0x7, 0x4,
	0x9, 0xa, 0xb, 0x8, 0xd, 0xe, 0xf, 0xc
};

void print_vector(uint8x16_t v)
{
	uint8_t c[16];
	vst1q_u8(c, v);
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)c[i]);
}

void print_array(uint8x16x4_t a)
{
	//uint8_t c[64];
	//vst1q_u8_x4(c, a);
	//for (uint8_t i = 0; i < 64; i++) printf("%02x ", (unsigned char)c[i]);
	//not able to use u8_x4
}

void load_encryption_table()
{
	for (int i = 0; i < 4; i++) {
		sboxv_enc[i] = vld4q_u8(sbox_enc + (i << 6));
	}
}

void load_decryption_table()
{
	for (int i = 0; i < 4; i++) {
		sboxv_dec[i] = vld4q_u8(sbox_dec + (i << 6));
	}
}

static inline uint8x16_t sl_xor(uint8x16_t tmp1)
{
	uint8x16_t tmp4;
	tmp4 = vextq_u8(vdupq_n_u8(0), tmp1, 0x0c);
	tmp1 = veorq_u8(tmp1, tmp4);
	tmp4 = vextq_u8(vdupq_n_u8(0), tmp4, 0x0c);
	tmp1 = veorq_u8(tmp1, tmp4);
	tmp4 = vextq_u8(vdupq_n_u8(0), tmp4, 0x0c);
	tmp1 = veorq_u8(tmp1, tmp4);
	return tmp1;
}

uint8_t gen_keys(const uint8_t *input_key, uint8x16_t *keys, const uint16_t keylen)
{

	uint8_t i, numkeys;
	uint32_t rcon;
	uint8x16_t temp, v;
	uint64_t u64;

	switch(keylen) {

	case 128:
		numkeys = 11;
		memcpy(keys, input_key, 16);
		rcon = 0x01;
		for (i = 0; i < 10; i++) {
			temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 3);
			v = vqtbl4q_u8(sboxv_enc[0], temp);
			v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
			v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
			v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
			temp = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
			vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
			keys++;
			*keys = veorq_u8(sl_xor(*(keys - 1)), temp);
			rcon <<= 1;
			if (rcon & 0x100) rcon ^= 0x11b;
		}
		break;

	case 192:
		numkeys = 13;
		memcpy(keys, input_key, 16);
		input_key += 16;
		memcpy(&u64, input_key, 8);
		keys++;
		*keys = (uint8x16_t)vcombine_u64(vcreate_u64(u64), vcreate_u64(0));
		rcon = 0x01;
		temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 1);
		v = vqtbl4q_u8(sboxv_enc[0], temp);
		v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
		v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
		v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
		v = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
		vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
		temp = veorq_u8(sl_xor(*(keys - 1)), v);
		*keys = (uint8x16_t)vcombine_u64(vcreate_u64(u64), vget_low_u64(vreinterpretq_u64_u8(temp)));
		for (i = 0; i < 3; i++) {
			v = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(temp), 3);
			v = veorq_u8(sl_xor(*keys), v);
			keys++;
			*keys = (uint8x16_t)vcombine_u64(vget_high_u64(vreinterpretq_u64_u8(temp)),
				vget_low_u64(vreinterpretq_u64_u8(v)));
			rcon <<= 1;
			if (rcon & 0x100) rcon ^= 0x11b;
			temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 3);
			v = vqtbl4q_u8(sboxv_enc[0], temp);
			v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
			v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
			v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
			v = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
				vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
			temp = (uint8x16_t)vcombine_u64(vget_high_u64(vreinterpretq_u64_u8(*(keys - 1))),
				vget_low_u64(vreinterpretq_u64_u8(*keys)));
			keys++;
			*keys = veorq_u8(sl_xor(temp), v);
			v = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 3);
			temp = (uint8x16_t)vcombine_u64(vget_high_u64(vreinterpretq_u64_u8(*(keys - 1))),
				vget_low_u64(vreinterpretq_u64_u8(*keys)));
			temp = veorq_u8(sl_xor(temp), v);
			keys++;
			*keys = (uint8x16_t)vcombine_u64(vget_low_u64(vreinterpretq_u64_u8(temp)), vcreate_u64(0));
			rcon <<= 1;
			if (rcon & 0x100) rcon ^= 0x11b;
			temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(temp), 1);
			v = vqtbl4q_u8(sboxv_enc[0], temp);
			v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
			v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
			v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
			v = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
				vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
			temp = veorq_u8(sl_xor(*(keys - 1)), v);
			*keys = (uint8x16_t)vcombine_u64(vget_low_u64(vreinterpretq_u64_u8(*keys)),
				vget_low_u64(vreinterpretq_u64_u8(temp)));
		}
		v = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(temp), 3);
		v = veorq_u8(sl_xor(*keys), v);
		keys++;
		*keys = (uint8x16_t)vcombine_u64(vget_high_u64(vreinterpretq_u64_u8(temp)),
			vget_low_u64(vreinterpretq_u64_u8(v)));
		rcon <<= 1;
		if (rcon & 0x100) rcon ^= 0x11b;
		temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 3);
		v = vqtbl4q_u8(sboxv_enc[0], temp);
		v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
		v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
		v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
		v = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
			vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
		temp = (uint8x16_t)vcombine_u64(vget_high_u64(vreinterpretq_u64_u8(*(keys - 1))),
			vget_low_u64(vreinterpretq_u64_u8(*keys)));
		keys++;
		*keys = veorq_u8(sl_xor(temp), v);
		break;

	case 256:
		numkeys = 15;
		memcpy(keys, input_key, 32);
		keys += 2;
		rcon = 0x01;
		for (i = 0; i < 6; i++) {
			temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*(keys - 1)), 3);
			v = vqtbl4q_u8(sboxv_enc[0], temp);
			v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
			v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
			v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
			temp = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
				vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
			*keys = veorq_u8(sl_xor(*(keys - 2)), temp);
			temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*keys), 3);
			v = vqtbl4q_u8(sboxv_enc[0], temp);
			v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
			v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
			v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
			keys++;
			*keys = veorq_u8(sl_xor(*(keys - 2)), v);
			keys++;
			rcon <<= 1;
			if (rcon & 0x100) rcon ^= 0x11b;
		}
		temp = (uint8x16_t)vdupq_laneq_u32(vreinterpretq_u32_u8(*(keys - 1)), 3);
		v = vqtbl4q_u8(sboxv_enc[0], temp);
		v = vqtbx4q_u8(v, sboxv_enc[1], temp - 0x40);
		v = vqtbx4q_u8(v, sboxv_enc[2], temp - 0x80);
		v = vqtbx4q_u8(v, sboxv_enc[3], temp - 0xc0);
		temp = (uint8x16_t)veorq_u32(vorrq_u32(vshlq_n_u32(vreinterpretq_u32_u8(v), 24),
			vshrq_n_u32(vreinterpretq_u32_u8(v), 8)), vdupq_n_u32(rcon));
		*keys = veorq_u8(sl_xor(*(keys - 2)), temp);
		break;

	default:
		return 0;
	}

	return numkeys;
}

static inline uint8x16_t encryption_round(uint8x16_t state, uint8x16_t key)
{
	uint8x16_t v;

	// SubBytes    
	v = vqtbl4q_u8(sboxv_enc[0], state);
	v = vqtbx4q_u8(v, sboxv_enc[1], state - 0x40);
	v = vqtbx4q_u8(v, sboxv_enc[2], state - 0x80);
	v = vqtbx4q_u8(v, sboxv_enc[3], state - 0xc0);

	// ShiftRows
	v = vqtbl1q_u8(v, shift_rows);

	// MixColumns
	state = (v << 1) ^ (uint8x16_t)(((int8x16_t)v >> 7) & 0x1b);
	state ^= (uint8x16_t)vrev32q_u16((uint16x8_t)v);
	state ^= vqtbl1q_u8(v ^ state, ror32by8);

	// AddRoundKey
	return veorq_u8(state, key);
}

static inline uint8x16_t decryption_round(uint8x16_t state, uint8x16_t key)
{
	uint8x16_t v, v2, v4, v8;

	// InvShiftRows
	state = vqtbl1q_u8(state, inv_shift_rows);

	// InvSubBytes    
	v = vqtbl4q_u8(sboxv_dec[0], state);
	v = vqtbx4q_u8(v, sboxv_dec[1], state - 0x40);
	v = vqtbx4q_u8(v, sboxv_dec[2], state - 0x80);
	v = vqtbx4q_u8(v, sboxv_dec[3], state - 0xc0);

	// AddRoundKey
	v = veorq_u8(v, key);

	// InvMixColumns
	v2 = (v << 1) ^ (uint8x16_t)(((int8x16_t)v >> 7) & 0x1b);
	v4 = (v2 << 1) ^ (uint8x16_t)(((int8x16_t)v2 >> 7) & 0x1b);
	v8 = (v4 << 1) ^ (uint8x16_t)(((int8x16_t)v4 >> 7) & 0x1b);
	state = (uint8x16_t)vrev32q_u16((uint16x8_t)(v ^ v8));
	state = vqtbl1q_u8(v ^ v2 ^ v8 ^ state, ror32by8);
	v = (uint8x16_t)vrev32q_u16((uint16x8_t)(v ^ v4 ^ v8));
	v2 ^= v4 ^ v8;
	state ^= v ^ v2;

	return state;
}

uint8x16_t encrypt(uint8x16_t block, uint8x16_t *keys, uint8_t numkeys)
{
	uint8_t i;
	uint8x16_t v;

	block = veorq_u8(block, *keys);
	for (i = 1; i < numkeys - 1; i++) {
		keys++;
		block = encryption_round(block, *keys);
	}
	v = vqtbl4q_u8(sboxv_enc[0], block);
	v = vqtbx4q_u8(v, sboxv_enc[1], block - 0x40);
	v = vqtbx4q_u8(v, sboxv_enc[2], block - 0x80);
	v = vqtbx4q_u8(v, sboxv_enc[3], block - 0xc0);
	block = vqtbl1q_u8(v, shift_rows);
	keys++;
	return veorq_u8(block, *keys);
}

uint8x16_t decrypt(uint8x16_t block, uint8x16_t *keys, uint8_t numkeys)
{
	int8_t i;
	uint8x16_t v;

	keys += (numkeys - 1);
	block = veorq_u8(block, *keys);
	for (i = numkeys - 1; i > 1; i--) {
		keys--;
		block = decryption_round(block, *keys);
	}
	block = vqtbl1q_u8(block, inv_shift_rows);
	v = vqtbl4q_u8(sboxv_dec[0], block);
	v = vqtbx4q_u8(v, sboxv_dec[1], block - 0x40);
	v = vqtbx4q_u8(v, sboxv_dec[2], block - 0x80);
	v = vqtbx4q_u8(v, sboxv_dec[3], block - 0xc0);
	keys--;
	return veorq_u8(v, *keys);
}

#define REPEATS 100000000

int main()
{
	uint8_t ik[16] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};
	uint8x16_t block0 = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
	};
	uint8x16_t block1 = {
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
		0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00
	};
	uint8x16_t block2 = {
		0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
		0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11
	};
	uint8x16_t block3 = {
		0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa,
		0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22
	};
	uint8x16_t block4 = {
		0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,
		0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33
	};
	uint8x16_t block5 = {
		0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc,
		0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44
	};
	uint8x16_t block6 = {
		0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
		0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55
	};
	uint8x16_t block7 = {
		0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
		0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66
	};
	uint8x16_t keys[11];
	time_t t0, t1;
	time(&t0);
	load_encryption_table();
	gen_keys(ik, keys, 128);
	for (uint64_t i = 0; i < REPEATS; i++) {
		block0 = encryption_round(block0, keys[10]);
	}
	print_vector(block0);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block1 = encryption_round(block1, keys[10]);
	}
	print_vector(block1);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block2 = encryption_round(block2, keys[10]);
	}
	print_vector(block2);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block3 = encryption_round(block3, keys[10]);
	}
	print_vector(block3);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block4 = encryption_round(block4, keys[10]);
	}
	print_vector(block4);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block5 = encryption_round(block5, keys[10]);
	}
	print_vector(block5);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block6 = encryption_round(block6, keys[10]);
	}
	print_vector(block6);
	printf("\n\r");
	for (uint64_t i = 0; i < REPEATS; i++) {
		block7 = encryption_round(block7, keys[10]);
	}
	print_vector(block7);
	printf("\n\r");
	time(&t1);
	printf("%ld seconds total\n\r", t1 - t0);
	return 0;
}
