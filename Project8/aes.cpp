#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <time.h>

#define ROR8(w) (((w) >> 8) | ((w) << 24))

const uint8_t ESBOX[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

const uint8_t DSBOX[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
	0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
	0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
	0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
	0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
	0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
	0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
	0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
	0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
	0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
	0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

void shift_rows(uint8_t* state)
{
	uint8_t t;
	t = state[1]; state[1] = state[5]; state[5] = state[9]; state[9] = state[13]; state[13] = t;
	t = state[2]; state[2] = state[10]; state[10] = t;
	t = state[6]; state[6] = state[14]; state[14] = t;
	t = state[3]; state[3] = state[15]; state[15] = state[11]; state[11] = state[7]; state[7] = t;
}

void inv_shift_rows(uint8_t* state)
{
	uint8_t t;
	t = state[1]; state[1] = state[13]; state[13] = state[9]; state[9] = state[5]; state[5] = t;
	t = state[2]; state[2] = state[10]; state[10] = t;
	t = state[6]; state[6] = state[14]; state[14] = t;
	t = state[3]; state[3] = state[7]; state[7] = state[11]; state[11] = state[15]; state[15] = t;
}

uint32_t sub_bytes(uint32_t word)
{
	uint32_t result = 0;
	for (int8_t i = 24; i >= 0; i -= 8) {
		result <<= 8;
		result |= ESBOX[uint8_t((word >> i) & 0xff)];
	}
	return result;
}

uint32_t inv_sub_bytes(uint32_t word)
{
	uint32_t result = 0;
	for (int i = 24; i >= 0; i -= 8) {
		result <<= 8;
		result |= DSBOX[uint8_t((word >> i) & 0xff)];
	}
	return result;
}

uint32_t mix_columns(uint32_t word)
{
	uint32_t b1, b2, b3, b4;
	uint32_t result = 0;
	for (int8_t i = 3; i >= 0; i--) {
		b1 = (word >> (i << 3)) & 0xff;
		b2 = (word >> (((i + 1) & 3) << 3)) & 0xff;
		b3 = (word >> (((i + 2) & 3) << 3)) & 0xff;
		b4 = (word >> (((i + 3) & 3) << 3)) & 0xff;
		b1 <<= 1;
		if (b1 & 0x100) b1 ^= 0x11b;
		b2 ^= (b2 << 1);
		if (b2 & 0x100) b2 ^= 0x11b;
		result = (result << 8) | (b1 ^ b2 ^ b3 ^ b4);
	}
	return result;
}

uint32_t inv_mix_columns(uint32_t word)
{
	uint32_t b1, b2, b3, b4, t;
	uint32_t result = 0;
	for (int8_t i = 3; i >= 0; i--) {
		b1 = (word >> (i << 3)) & 0xff;
		b2 = (word >> (((i + 1) & 3) << 3)) & 0xff;
		b3 = (word >> (((i + 2) & 3) << 3)) & 0xff;
		b4 = (word >> (((i + 3) & 3) << 3)) & 0xff;
		b1 <<= 1;
		if (b1 & 0x100) b1 ^= 0x11b;
		t = b1 << 1;
		if (t & 0x100) t ^= 0x11b;
		t ^= (t << 1);
		if (t & 0x100) t ^= 0x11b;
		b1 ^= t;
		t = b2 << 1;
		if (t & 0x100) t ^= 0x11b;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		b2 ^= (b2 << 1);
		if (b2 & 0x100) b2 ^= 0x11b;
		b2 ^= t;
		t = b3 << 1;
		if (t & 0x100) t ^= 0x11b;
		t ^= b3;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		b3 ^= t;
		t = b4 << 1;
		if (t & 0x100) t ^= 0x11b;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		t <<= 1;
		if (t & 0x100) t ^= 0x11b;
		b4 ^= t;
		result = (result << 8) | (b1 ^ b2 ^ b3 ^ b4);
	}
	return result;
}

void add_round_key(uint32_t *state, uint32_t *key)
{
	for (uint8_t i = 0; i < 4; i++) {
		state[i] ^= key[i];
	}
}

uint8_t keygen(const uint8_t *input_key, uint8_t *keys, const uint16_t keylen)
{

#define G(word, rcon) (sub_bytes(ROR8(word))) ^ (uint32_t(rcon))

	uint8_t i, numkeys;
	uint32_t kwords[60];
	uint32_t rcon;
	switch(keylen) 
	{
	case 128:
		numkeys = 11;
		for (i = 0; i < 4; i++) {
			kwords[i] = ((uint32_t *)input_key)[i];
		}
		rcon = 1;
		for (i = 4; i < 44; i++) {
			if ((i & 3) != 0) {
				kwords[i] = kwords[i-4] ^ kwords[i-1];
			} else {
				kwords[i] = kwords[i-4] ^ G(kwords[i-1], rcon);
				rcon <<= 1;
				if (rcon & 0x100) rcon ^= 0x11b;
			}
		}
		break;
	default:
		return 0;
	}
	memcpy(keys, kwords, numkeys * 16);
	return numkeys;
}

void encryption_round(uint32_t *state, uint32_t *key)
{
	uint8_t i;
	for (i = 0; i < 4; i++) state[i] = sub_bytes(state[i]);
	shift_rows((uint8_t *)state);
	for (i = 0; i < 4; i++) state[i] = mix_columns(state[i]);
	add_round_key(state, key);
}

void decryption_round(uint32_t *state, uint32_t *key)
{
	uint8_t i;
	inv_shift_rows((uint8_t *)state);
	for (i = 0; i < 4; i++) state[i] = inv_sub_bytes(state[i]);
	add_round_key(state, key);
	for (i = 0; i < 4; i++) state[i] = inv_mix_columns(state[i]);
}

void encrypt(uint8_t *input, uint8_t *output, uint8_t *keys, uint8_t numkeys)
{
	uint32_t state[4];
	uint8_t i;
	memcpy(state, input, 16);
	add_round_key(state, (uint32_t *)keys);
	keys += 16;
	for (i = 1; i < numkeys - 1; i++, keys+= 16) {
		encryption_round(state, (uint32_t *)keys);
	}
	for (i = 0; i < 4; i++) state[i] = sub_bytes(state[i]);
	shift_rows((uint8_t *)state);
	add_round_key(state, (uint32_t *)keys);
	memcpy(output, state, 16);
}

void decrypt(uint8_t *input, uint8_t *output, uint8_t *keys, uint8_t numkeys)
{
	uint32_t state[4];
	uint8_t i;
	memcpy(state, input, 16);
	keys += ((numkeys - 1) << 4);
	add_round_key(state, (uint32_t *)keys);
	keys -= 16;
	for (i = 1; i < numkeys - 1; i++, keys-= 16) {
		decryption_round(state, (uint32_t *)keys);
	}
	inv_shift_rows((uint8_t *)state);
	for (i = 0; i < 4; i++) state[i] = inv_sub_bytes(state[i]);
	add_round_key(state, (uint32_t *)keys);
	memcpy(output, state, 16);
}

#define Rnum 100000000

int main()
{
	uint8_t ik[16] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
	};
	uint8_t block0[16] = {
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
	};
	uint8_t block1[16] = {
		0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
		0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00
	};
	uint8_t block2[16] = {
		0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
		0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11
	};
	uint8_t block3[16] = {
		0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa,
		0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22
	};
	uint8_t block4[16] = {
		0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,
		0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33
	};
	uint8_t block5[16] = {
		0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc,
		0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44
	};
	uint8_t block6[16] = {
		0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd,
		0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55
	};
	uint8_t block7[16] = {
		0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
		0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66
	};
	uint8_t keys[176];
	time_t t0, t1;
	time(&t0);
	keygen(ik, keys, 128);
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block0, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block0[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block1, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block1[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block2, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block2[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block3, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block3[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block4, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block4[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block5, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block5[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block6, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block6[i]);
	printf("\n\r");
	for (uint64_t i = 0; i < Rnum; i++) {
		encryption_round((uint32_t *)block7, (uint32_t *)(keys + 160));
	}
	for (uint8_t i = 0; i < 16; i++) printf("%02x", (unsigned char)block7[i]);
	printf("\n\r");
	time(&t1);
	printf("%ld seconds total\n\r", t1 - t0);
	return 0;
}
